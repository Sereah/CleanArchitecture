@startuml weather uml
title Weather Feature

' presentation

class WeatherViewModel {
    - getLocationUseCase: GetLocationUseCase
    - requestAndSaveWeatherUseCase: RequestAndSaveWeatherUseCase
    - queryNowWeatherUseCase: QueryNowWeatherUseCase
    - queryDailyWeatherUseCase: QueryDailyWeatherUseCase
    - queryHourlyWeatherUseCase: QueryHourlyWeatherUseCase
    - getWeatherGeoListUseCase: GetWeatherGeoListUseCase
    - getNowWeatherUseCase: GetNowWeatherUseCase
    - getDailyWeatherUseCase: GetDailyWeatherUseCase
    - getHourlyWeatherUseCase: GetHourlyWeatherUseCase
    - queryAllWeatherUseCase: QueryAllWeatherUseCase
    + observeLocationChange(): Void
    - getWeatherGeo(lat: Double, lon: Double): WeatherGeo
    - requestAndSaveWeather(location: String, isCurrentLocation: Boolean): Void
}

WeatherViewModel ..> GetLocationUseCase
WeatherViewModel ..> RequestAndSaveWeatherUseCase
WeatherViewModel ..> QueryNowWeatherUseCase
WeatherViewModel ..> QueryDailyWeatherUseCase
WeatherViewModel ..> QueryHourlyWeatherUseCase
WeatherViewModel ..> GetWeatherGeoListUseCase
WeatherViewModel ..> GetNowWeatherUseCase
WeatherViewModel ..> GetDailyWeatherUseCase
WeatherViewModel ..> GetHourlyWeatherUseCase
WeatherViewModel ..> QueryAllWeatherUseCase


' domain

interface ILocationRepository {
    + getLocation(): Flow<Location>
}

interface IWeatherRepository {
    + requestAndSaveWeather(location: String, isCurrentLocation: Boolean): Void
    + queryNowWeather(id: String): Flow<NowWeather>
    + queryDailyWeather(id: String): Flow<List<DailyWeather>>
    + queryHourlyWeather(id: String): Flow<List<HourlyWeather>>
    + getGeoList(keyword: String): List<WeatherGeo>
    + getNowWeather(locationId: String): NowWeather
    + getDailyWeather(locationId: String): List<DailyWeather>
    + getHourlyWeather(locationId: String): List<HourlyWeather>
    + queryAllWeather(): Flow<List<Weather>>
}

class GetLocationUseCase {
    - repository: ILocationRepository
    + invoke(): Flow<Location>
}

class RequestAndSaveWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(location: String, isCurrentLocation: Boolean): Void
}

class QueryNowWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): Flow<NowWeather>
}

class QueryDailyWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): Flow<List<DailyWeather>>
}

class QueryHourlyWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): Flow<List<HourlyWeather>>
}

class GetWeatherGeoListUseCase {
    - repository: IWeatherRepository
    + invoke(keyword: String): List<WeatherGeo>
}

class GetNowWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): NowWeather
}

class GetDailyWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): List<DailyWeather>
}

class GetHourlyWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(id: String): List<HourlyWeather>
}

class QueryAllWeatherUseCase {
    - repository: IWeatherRepository
    + invoke(): Flow<List<Weather>>
}

GetLocationUseCase ..> ILocationRepository
RequestAndSaveWeatherUseCase ..> IWeatherRepository
QueryNowWeatherUseCase ..> IWeatherRepository
QueryDailyWeatherUseCase ..> IWeatherRepository
QueryHourlyWeatherUseCase ..> IWeatherRepository
GetWeatherGeoListUseCase ..> IWeatherRepository
GetNowWeatherUseCase ..> IWeatherRepository
GetDailyWeatherUseCase ..> IWeatherRepository
GetHourlyWeatherUseCase ..> IWeatherRepository
QueryAllWeatherUseCase ..> IWeatherRepository
ILocationRepository <|.. LocationRepositroy
IWeatherRepository <|.. WeatherRepository


' data

class LocationRepositroy {
    - locationManager: LocationManager
    - appContext: Context
    + getLocation(): Flow<Location>
}

class WeatherRepository {
    - weatherRemoteDataSource: WeatherRemoteDataSource
    - weatherLocalDataSource: WeatherLocalDataSource
    + requestAndSaveWeather(location: String, isCurrentLocation: Boolean): Void
    + queryNowWeather(id: String): Flow<NowWeather>
    + queryDailyWeather(id: String): Flow<List<DailyWeather>>
    + queryHourlyWeather(id: String): Flow<List<HourlyWeather>>
    + getGeoList(keyword: String): List<WeatherGeo>
    + getNowWeather(locationId: String): NowWeather
    + getDailyWeather(locationId: String): List<DailyWeather>
    + getHourlyWeather(locationId: String): List<HourlyWeather>
    + queryAllWeather(): Flow<List<Weather>>
}

class WeatherRemoteDataSource {
    - qweatherApi: QWeatherApi
    + getGeo(location: String): QWeatherGeoDTO
    + getNowWeather(locationId: String): QWeatherNowDTO
    + getDailyWeather(locationId: String): QWeatherDailyDTO
    + getHourlyWeather(locationId: String): QWeatherHourlyDTO
}

class WeatherLocalDataSource {
    - weatherDao: WeatherDao
    + insertWeatherGeo(geo: QWeatherGeoEntity): Void
    + insertNowWeather(now: QWeatherNowEntity): Void
    + insertDailyWeather(daily: List<QWeatherDailyEntity>): Void
    + insertHourlyWeather(hourly: List<QWeatherHourlyEntity>): Void
    + queryNowWeather(locationId: String): Flow<QWeatherNowEntity>
    + queryDailyWeather(locationId: String): Flow<List<QWeatherDailyEntity>>
    + queryHourlyWeather(locationId: String): Flow<List<QWeatherHourlyEntity>>
    + queryAllWeather(): Flow<List<QWeatherEntity>>
}

interface QWeatherApi {
    + getGeo(location: String): QWeatherGeoDTO
    + getNowWeather(location: String): QWeatherNowDTO
    + getDailyWeather(location: String): QWeatherDailyDTO
    + getHourlyWeather(location: String): QWeatherHourlyDTO
}

interface WeatherDao {
    + deleteOldLocationQWeatherGeo(): Void
    + insertQWeatherGeo(geo: QWeatherGeoEntity): Void
    + deleteOldLocationQWeatherNow(): Void
    + insertQWeatherNow(now: QWeatherNowEntity): Void
    + deleteOldLocationQWeatherDaily(): Void
    + insertQWeatherDaily(daily: List<QWeatherDailyEntity>): Void
    + deleteOldLocationQWeatherHourly(): Void
    + insertQWeatherHourly(hourly: List<QWeatherHourlyEntity>): Void
    + queryQWeatherNow(locationId: String): Flow<QWeatherNowEntity>
    + queryQWeatherDaily(locationId: String): Flow<List<QWeatherDailyEntity>>
    + queryQWeatherHourly(locationId: String): Flow<List<QWeatherHourlyEntity>>
    + queryAllQWeather(): Flow<List<QWeatherEntity>>
}

WeatherRepository ..> WeatherRemoteDataSource
WeatherRepository ..> WeatherLocalDataSource
WeatherRemoteDataSource ..> QWeatherApi
WeatherLocalDataSource ..> WeatherDao

@enduml